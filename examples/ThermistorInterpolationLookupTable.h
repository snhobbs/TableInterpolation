/*
 * Copyright 2021 ElectroOptical Innovations, LLC
 * ThermistorInterpolationLookupTable.h 
 * Autogenerated file: 2021-06-02
 */

#pragma once
#include "LinearInterpolator.h"
#include <utility>
#include <tuple>
#include <array>
#include <cstdint>

template<typename type_t>
class ThermistorInterpolationLookupTable {
  static const constexpr std::size_t kPoints = 61;
  //static const constexpr std::size_t kPoints = 62;
  static constexpr std::array<std::tuple<type_t, type_t, type_t>, kPoints> table { {
  //ADCPoint, gain, slope
    { 65, 406.3877461750938, -0.4203191118836842 },
    { 130, 379.06700390265433, -0.22425168665459366 },
    { 195, 364.49064427010575, -0.15138594787197499 },
    { 260, 354.6505576584274, -0.113793179789942 },
    { 325, 347.25400097208114, -0.09104644007351313 },
    { 390, 341.3359823673028, -0.07589592252171717 },
    { 455, 336.4027474033912, -0.06513299788097304 },
    { 520, 332.1691025411279, -0.057124690865304306 },
    { 585, 328.45599763488315, -0.05095485190679308 },
    { 650, 325.1439322609416, -0.04607098494172638 },
    { 715, 322.1493182397294, -0.042120764432373704 },
    { 780, 319.4114685516251, -0.038869286607829366 },
    { 845, 316.8849649221162, -0.03615414233677869 },
    { 910, 314.53494567022557, -0.033859602677546265 },
    { 975, 312.33407149618506, -0.031901075570462685 },
    { 1040, 310.260501584105, -0.03021537135139257 },
    { 1105, 308.29650244626447, -0.028754398167375083 },
    { 1170, 306.4274665653851, -0.02748095883602603 },
    { 1235, 304.6412042410434, -0.026365877141057145 },
    { 1300, 302.9274222268747, -0.025385989126132595 },
    { 1365, 301.27733293367606, -0.02452271137179878 },
    { 1430, 299.68335669450914, -0.023761002791260265 },
    { 1495, 298.1388915130772, -0.023088600259564794 },
    { 1560, 296.6381324962055, -0.0224954483194735 },
    { 1625, 295.17592835543974, -0.021973268796658046 },
    { 1690, 293.74766588365696, -0.021515232910769556 },
    { 1755, 292.34917574445694, -0.021115709656692162 },
    { 1820, 290.97665461677195, -0.02077007184192413 },
    { 1885, 289.6265999470469, -0.02047454643937429 },
    { 1950, 288.29575442848756, -0.020226099636861887 },
    { 2015, 286.98105795209153, -0.020022349645620788 },
    { 2080, 285.6796052251262, -0.019861502308660524 },
    { 2145, 284.38860757506325, -0.01974230605646181 },
    { 2210, 283.10535768139323, -0.01966402395424106 },
    { 2275, 281.82719612436756, -0.01962642159213776 },
    { 2340, 280.5514787208786, -0.019629770483211708 },
    { 2405, 279.27554363946984, -0.019674867539197293 },
    { 2470, 277.996677249422, -0.01976307217725417 },
    { 2535, 276.7120775579005, -0.01989636377235404 },
    { 2600, 275.4188139126975, -0.020077423638654706 },
    { 2665, 274.11378137618493, -0.020309747679502485 },
    { 2730, 272.79364777701727, -0.020597798554443287 },
    { 2795, 271.45479087097846, -0.02094721007851971 },
    { 2860, 270.0932222158747, -0.021365062231060303 },
    { 2925, 268.70449317085576, -0.02186025363812842 },
    { 2990, 267.2835766843774, -0.02244401140983515 },
    { 3055, 265.8247159427381, -0.02313059866219891 },
    { 3120, 264.3212270296952, -0.023938313012460046 },
    { 3185, 262.7652366838853, -0.024890923985335052 },
    { 3250, 261.1473266248385, -0.02601979079017925 },
    { 3315, 259.45604022347686, -0.02736706780978973 },
    { 3380, 257.67718081584053, -0.02899071167408395 },
    { 3445, 255.79278455702507, -0.03097259779785654 },
    { 3510, 253.7795657001644, -0.03343227145220628 },
    { 3575, 251.606468055771, -0.03655152473812852 },
    { 3640, 249.23061894779264, -0.040621326778660184 },
    { 3705, 246.59023270717972, -0.04613930671143163 },
    { 3770, 243.59117777093667, -0.05403606992500202 },
    { 3835, 240.07883322581154, -0.06628893532970148 },
    { 3900, 235.77005242938094, -0.0880319666535876 },
    { 3965, 230.04797459689775, -0.13873700801973426 },
  } };

 public:
  static constexpr auto min_index = std::get<LinearInterpolator::OutputValueTuplePos>(table[0]);
  static constexpr auto max_index = std::get<LinearInterpolator::OutputValueTuplePos>(table[kPoints-1]);

  static constexpr type_t reverse_translate(const type_t reading) {
    return LinearInterpolator::reverse_interpolate<type_t>(table.data(), table.size(), reading);
  }

  static constexpr type_t translate(const type_t reading) {
    return LinearInterpolator::Interpolate<type_t>(table.data(), table.size(), reading);
  }
};
